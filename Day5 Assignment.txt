

Question 1:-
Write the function for insertion sort.

Answer:-

#include <math.h> 
#include <stdio.h> 
   
// Insertion Sort Function
void insertionSort(int array[], int n) 
{ 
    int i, element, j; 
    for (i = 1; i < n; i++) { element = array[i]; j = i - 1; while (j >= 0 && array[j] > element) { 
            array[j + 1] = array[j]; 
            j = j - 1; 
        } 
        array[j + 1] = element; 
    } 
} 
   
// Function to print the elements of an array
void printArray(int array[], int n) 
{ 
    int i; 
    for (i = 0; i < n; i++) 
        printf("%d ", array[i]); 
    printf("n"); 
}


Question 2:-
Write a function to find the maximum element in the stack.

Answer:-

using System; 
using System.Collections.Generic; 
  
class GfG  
{ 
  
public class StackWithMax  
{  
    // main stack  
    static Stack<int> mainStack = new Stack<int> ();  
  
    // tack to keep track of max element  
    static Stack<int> trackStack = new Stack<int> ();  
  
    public void push(int x)  
    {  
        mainStack.Push(x);  
        if (mainStack.Count == 1)  
        {  
            trackStack.Push(x);  
            return;  
        }  
  
        // If current element is greater than  
        // the top element of track stack, push  
        // the current element to track stack  
        // otherwise push the element at top of  
        // track stack again into it.  
        if (x > trackStack.Peek())  
            trackStack.Push(x);  
        else
            trackStack.Push(trackStack.Peek());  
    }  
  
    public int getMax()  
    {  
        return trackStack.Peek();  
    }  
  
    public void pop()  
    {  
        mainStack.Pop();  
        trackStack.Pop();  
    }  
};  
  
// Driver code 
public static void Main()  
{  
    StackWithMax s = new StackWithMax();  
    s.push(20);  
    Console.WriteLine(s.getMax());  
    s.push(10);  
    Console.WriteLine(s.getMax());  
    s.push(50);  
    Console.WriteLine(s.getMax());  
} 
}  

Question 3:-
Write a function to find the minimum element in the stack.

Answer:-

#include <stdio.h>
#include <stack.h>
 
class Stack
{
    // main stack to store elements
    std::stack<int> s;
 
    // variable to store minimum element
    int min;
 
public:
 
    // Inserts a given element on top of the stack
    void push(int x)
    {
        if (s.empty()) {
            s.push(x);
            min = x;
        }
        else if (x > min) {
            s.push(x);
        }
        else {
            s.push(2 * x - min);
            min = x;
        }
    }
 
    // Removes top element from the stack and returns it
    void pop()
    {
        if (s.empty()) {
            std::cout << "Stack underflow!!" << '\n';
        }
 
        int top = s.top();
        if (top < min)
            min = 2 * min - top;
        s.pop();
    }
 
    // Returns the minimum element from the stack in constant time
    int minimum()
    {
        return min;
    }
};
 
int main()
{
    Stack s;
 
    s.push(6);
    std::cout << s.minimum() << '\n';
 
    s.push(7);
    std::cout << s.minimum() << '\n';
 
    s.push(5);
    std::cout << s.minimum() << '\n';
 
    s.push(3);
    std::cout << s.minimum() << '\n';
 
    s.pop();
    std::cout << s.minimum() << '\n';
 
    s.pop();
    std::cout << s.minimum() << '\n';
 
    return 0;
}